import { App } from '@rocket.chat/apps-engine/definition/App';
import { ISlashCommand, SlashCommandContext } from '@rocket.chat/apps-engine/definition/slashcommands';
import { IRead, IModify, IHttp, IPersistence, ILogger } from '@rocket.chat/apps-engine/definition/accessors';
import { IUser } from '@rocket.chat/apps-engine/definition/users';

export class AtenaSlashCommand implements ISlashCommand {

    public command: string;    
    public i18nParamsExample: string;
    public i18nDescription: string;
    public providesPreview: boolean;

    constructor(private readonly app: App) {
        this.command = 'atena';
        this.i18nParamsExample = 'params_example';
        this.i18nDescription = 'commmand_description';
        this.providesPreview = false;
    }

    public async executor(context: SlashCommandContext, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<void> {
	// https://github.com/RocketChat/Apps.Cloudflare/blob/master/slashcommands.ts
	const [command] = context.getArguments();
        const server = await read.getEnvironmentReader().getSettings().getValueById('server');
        const [roomName] = context.getArguments();
        const url = server + (roomName ? roomName : context.getRoom().id + '-' + context.getSender().id);
	    // const sender = await read.getUserReader().getById('rocket.cat');
	const sender = await read.getUserReader().getByUsername('atena');
	this.app.getLogger().log('quero o sender?: ', sender);
        return await this.sendMessage(context, modify, `Join the ${url}}\nLink generated by slashcommand \`/atena\``, sender);
    }

    private async sendMessage(context: SlashCommandContext, modify: IModify, text: string, sender: IUser): Promise<void> {
        const msg = modify.getCreator()
            .startMessage()
            .setText(text)
            .setEmojiAvatar(':calendar:')
	    .setUsernameAlias('atena')
            .setRoom(context.getRoom())    
            .setSender(sender);

         // .setSender(context.getSender());
	 //await modify.getCreator().finish(msg);
         await modify.getNotifier().notifyUser(context.getSender(), msg.getMessage());
    }

}

export class AtenaRankingSlashCommand implements ISlashCommand {

    public command: string;    
    public i18nParamsExample: string;
    public i18nDescription: string;
    public providesPreview: boolean;

    constructor(private readonly app: App) {
        this.command = 'ranking';
        this.i18nParamsExample = 'params_example';
        this.i18nDescription = 'commmand_description';
        this.providesPreview = false;
    }

    public async executor(context: SlashCommandContext, read: IRead, modify: IModify, http: IHttp, persis: IPersistence): Promise<void> {
	// https://github.com/RocketChat/Apps.Cloudflare/blob/master/slashcommands.ts
	const [command] = context.getArguments();
        const server = await read.getEnvironmentReader().getSettings().getValueById('server');
        const [roomName] = context.getArguments();
        const url = server + (roomName ? roomName : context.getRoom().id + '-' + context.getSender().id);
	    // const sender = await read.getUserReader().getById('rocket.cat');
	const sender = await read.getUserReader().getByUsername('atena');
	this.app.getLogger().log('quero o sender?: ', sender);
        return await this.sendMessage(context, modify, `RANKING Join the ${url}}\nLink generated by slashcommand \`/atena\``, sender);
    }

    private async sendMessage(context: SlashCommandContext, modify: IModify, text: string, sender: IUser): Promise<void> {
        const msg = modify.getCreator()
            .startMessage()
            .setText(text)
            .setEmojiAvatar(':calendar:')
	    .setUsernameAlias('atena')
            .setRoom(context.getRoom())    
            .setSender(sender);

         // .setSender(context.getSender());
	 //await modify.getCreator().finish(msg);
         await modify.getNotifier().notifyUser(context.getSender(), msg.getMessage());
    }

}
